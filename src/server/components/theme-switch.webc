<button>üåù</button>
<style webc:scoped>
  :host:not(:defined) {
    display: none;
  }
  :host {
    position: fixed;
    top: 0;
    right: 0;
    padding: 1.4em;
  }
  :host button {
    font: inherit;
    margin: 0;
    font-size: 1.2em;
    background: none;
    border: none;
    cursor: pointer;
    transition: transform .2s ease-in-out;
  }
  :host button:hover, :host button:active {
    transform: scale(1.1)
  }
</style>
<script>
window.customElements.define("theme-switch", class extends HTMLElement {
  constructor(...args) {
    super(...args)
    this.toggleTheme = this.toggleTheme.bind(this)
    this.onThemeChange = this.onThemeChange.bind(this)

    this.body = document.querySelector("body") 
    this.setTheme('light')
    this.themeChangeObserver = new MutationObserver(this.onThemeChange)
    this.button = this.querySelector("button")
  }
  connectedCallback() {
    this.button.addEventListener('click', this.toggleTheme)

    this.themeChangeObserver.observe(this.body, {
      attributeFilter: ['data-theme']
    })
  }
  disconnectedCallback() {
    this.button.removeEventListener('click', this.toggleTheme)
    this.themeChangeObserver.disconnect()
  }
  onThemeChange() {
    let theme = this.body.getAttribute('data-theme')
    if (theme === 'light') {
      this.button.innerHTML = "üåö"
    } else {
      this.button.innerHTML = "üåù"
    }
  }
  toggleTheme() {
    if (this.body.getAttribute('data-theme') === 'dark') {
      this.setTheme('light')
    } else {
      this.setTheme('dark')
    }
  }
  setTheme(theme) {
    this.body.setAttribute("data-theme", theme)
  }
})
</script>
